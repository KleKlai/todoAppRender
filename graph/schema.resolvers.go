package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/kleklai/todoAppv1/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	res, err := r.Service.CreateTodo(&input)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	res, err := r.Service.CreateUser(&input)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*model.Todo, error) {
	res, err := r.Service.DeleteTodo(id)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	res, err := r.Service.DeleteUser(id)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateTodoDone is the resolver for the updateTodoDone field.
func (r *mutationResolver) UpdateTodoDone(ctx context.Context, input model.UpdateTodoDoneInput) (*model.UpdateTodoDone, error) {
	res, err := r.Service.UpdateTodoDone(&input)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateTodoTask is the resolver for the updateTodoTask field.
func (r *mutationResolver) UpdateTodoTask(ctx context.Context, input model.UpdateTodoTaskInput) (*model.UpdateTodoTask, error) {
	res, err := r.Service.UpdateTodoTask(&input)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	res, err := r.Service.GetUser(id)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	res, err := r.Service.GetTodoByID(id)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// GetTodoOfUserByStatus is the resolver for the getTodoOfUserByStatus field.
func (r *queryResolver) GetTodoOfUserByStatus(ctx context.Context, userID string, done bool) ([]*model.Todo, error) {
	res, err := r.Service.GetTodoOfUserByStatus(userID, done)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *model.User) ([]*model.Todo, error) {
	res, err := r.Service.GetTodoByUser(obj.ID)

	if err != nil {
		return nil, err
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
